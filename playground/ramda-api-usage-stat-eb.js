// NOTE 2017-09-04 Ramda v0.24 api usage stat on eb
// search path blackhole/eb/**/*.js

// NOTE the search including commented code

const R = require('ramda')

const RamdaApiStat = {
  F: [2, 2],    // 2 usages in 2 files
  T: [26, 9],
  __: [12, 6],
  add: [7, 5],
  addIndex: [5, 5],
  adjust: [0],
  all: [1, 1],
  allPass: [2, 2],
  always: [134, 30],
  and: [1, 1],
  any: [1, 1],
  anyPass: [0],
  ap: [0],
  aperture: [0],
  append: [9, 7],
  apply: [5, 3],
  applySpec: [3, 1],
  ascend: [0],
  assoc: [64, 8],
  assocPath: [17, 7],
  binary: [0],
  bind: [0],
  both: [1, 1],
  call: [1, 1],
  chain: [0],
  clamp: [1, 1],
  clone: [0],
  comparator: [0],
  complement: [5, 5],
  compose: [16, 13],
  composeK: [0],
  composeP: [0],
  concat: [0],
  cond: [35, 13],
  construct: [0],
  constructN: [0],
  contains: [28, 14],
  converge: [0],
  countBy: [0],
  curry: [6, 2],
  curryN: [5, 2],
  dec: [1, 1],
  defaultTo: [0],
  descend: [0],
  difference: [0],
  differenceWith: [0],
  dissoc: [0],
  dissocPath: [0],
  divide: [4, 2],
  drop: [2, 2],
  dropLast: [0],
  dropLastWhile: [0],
  dropRepeats: [0],
  dropRepeatsWith: [0],
  dropWhile: [0],
  either: [1, 1],
  empty: [4, 2],
  endsWith: [0],
  eqBy: [0],
  eqProps: [0],
  equals: [67, 19],
  evolve: [5, 4],
  filter: [10, 8],
  find: [38, 19],
  findIndex: [0],
  findLast: [0],
  findLastIndex: [0],
  flatten: [1, 1],
  flip: [5, 5],
  forEach: [2, 2],
  forEachObjIndexed: [0],
  fromPairs: [0],
  groupBy: [0],
  groupWith: [1, 1],
  gt: [7, 5],
  gte: [3, 2],
  has: [2, 2],
  hasIn: [0],
  head: [20, 12],
  identical: [0],
  identity: [28, 20],
  ifElse: [38, 23],
  inc: [0],
  indexBy: [0],
  indexOf: [1, 1],
  init: [0],
  innerJoin: [0],
  insert: [3, 1],
  insertAll: [0],
  intersection: [1, 1],
  intersectionWith: [0],
  intersperse: [0],
  into: [0],
  invert: [0],
  invertObj: [0],
  invoker: [0],
  is: [3, 3],
  isEmpty: [20, 8],
  isNil: [60, 29],
  join: [1, 1],
  juxt: [2, 1],
  keys: [0],
  keysIn: [0],
  last: [6, 4],
  lastIndexOf: [0],
  length: [8, 6],
  lens: [0],
  lensIndex: [0],
  lensPath: [0],
  lensProp: [0],
  lift: [0],
  liftN: [0],
  lt: [5, 5],
  lte: [7, 3],
  map: [27, 16],
  mapAccum: [0],
  mapAccumRight: [0],
  mapObjIndexed: [4, 3],
  match: [4, 3],
  mathMod: [2, 2],
  max: [3, 1],
  maxBy: [0],
  mean: [0],
  median: [0],
  memoize: [0],
  memoizeWith: [0],
  merge: [6, 4],
  mergeAll: [0],
  mergeDeepLeft: [0],
  mergeDeepRight: [0],
  mergeDeepWith: [0],
  mergeDeepWithKey: [0],
  mergeWith: [0],
  mergeWithKey: [0],
  min: [3, 1],
  minBy: [0],
  modulo: [0],
  multiply: [4, 3],
  nAry: [1, 1],
  negate: [0],
  none: [0],
  not: [8, 4],
  nth: [4, 3],
  nthArg: [12, 8],  // useful
  o: [0],
  objOf: [0],
  of: [0],
  omit: [1, 1],
  once: [0],
  or: [0],
  over: [0],
  pair: [5, 4],
  partial: [0],
  partialRight: [0],
  partition: [0],
  path: [82, 27],
  pathEq: [0],
  pathOr: [27, 17],
  pathSatisfies: [0],
  pick: [17, 15],
  pickAll: [0],
  pickBy: [0],
  pipe: [165, 51],
  pipeK: [0],
  pipeP: [0],
  pluck: [0],
  prepend: [0],
  product: [0],
  project: [0],
  prop: [86, 28],
  propEq: [4, 4],
  propIs: [2, 2],
  propOr: [12, 8],
  propSatisfies: [5, 3],
  props: [0],
  range: [12, 8],
  reduce: [2, 2],
  reduceBy: [0],
  reduceRight: [0],
  reduceWhile: [0],
  reduced: [0],
  reject: [0],
  remove: [0],
  repeat: [0],
  replace: [],
  reverse: [1, 1],
  scan: [0],
  sequence: [0],
  set: [0],
  slice: [1, 1],
  sort: [1, 1],
  sortBy: [1, 1],
  sortWith: [0],
  split: [2, 2],
  splitAt: [0],
  splitEvery: [0],
  splitWhen: [0],
  startsWith: [0],
  subtract: [0],
  sum: [2, 2],
  symmetricDifference: [0],
  symmetricDifferenceWith: [0],
  tail: [2, 2],
  take: [3, 3],
  takeLast: [0],
  takeLastWhile: [0],
  takeWhile: [0],
  tap: [0],
  test: [9, 5],
  times: [0],
  toLower: [0],
  toPairs: [2, 2],
  toPairsIn: [0],
  toString: [1, 1],
  toUpper: [0],
  transduce: [0],
  transpose: [0],
  traverse: [0],
  trim: [0],
  tryCatch: [0],
  type: [0],
  unapply: [0],
  unary: [0],
  uncurryN: [4, 4],
  unfold: [0],
  union: [0],
  unionWith: [0],
  uniq: [0],
  uniqBy: [0],
  uniqWith: [0],
  unless: [2, 1],
  unnest: [0],
  until: [0],
  update: [0],
  useWith: [2, 2],
  values: [5, 4],
  valuesIn: [0],
  view: [0],
  when: [10, 7],
  where: [0],
  whereEq: [0],
  without: [5, 5],
  xprod: [0],
  zip: [1, 1],
  zipObj: [2, 2],
  zipWith: [2, 2],
}

console.log(`progress:
  ${Object.keys(RamdaApiStat).filter(k => RamdaApiStat[k].length > 0).length}/${Object.keys(R).length} apis`)

const KEYS = Object.keys(RamdaApiStat).filter(x => RamdaApiStat[x].length > 0)

// console.log(`top 10 ${KEYS.sort((a, b) => RamdaApiStat[a][0] < RamdaApiStat[b][0]).slice(0, 10)}`)
console.log(`top 20:\n\n${KEYS.sort(
  (a, b) => RamdaApiStat[b][0] - RamdaApiStat[a][0])
  .slice(0, 20).join('\n')}`
)
